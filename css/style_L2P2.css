/*
========================================
0       0       0       0
style   id      class   element
=========================================
*/


/* 
h1 - это элемент и поэтому порядок стилей задается
=========================================
0       0       0       1
style   id      class   element
*/
h1{
    color:red;
    font-weight: normal;
}


/* 
Когда задан id, мы задаем его ХЕШ-ТЕГОМ
id="my_first_name", будет учитываться по ИД,
и порядок будет выше, 100 против 1 для h1, 
и поэтому my_first_name будет уже зеленым, а не красным 
=========================================
0       1       0       0
style   id      class   element
*/


/*
Когда задан КЛАСС, мы задаем его ТОЧКОЙ
class="my_name"
будет учитываться по ИД,
и порядок будет выше, 10 против 1 для h1, 
и поэтому my_name будет уже серым, а не красным
=========================================
0       0       1       0
style   id      class   element
*/


.my_names_block{
    
    /* Добавили возможность двум блокам отображаться как FLEX,
    и благодаря этому мы можем использовать ещё два атрибута:
    justify-content - где эти атрибуты будут размещаться:
        => flex-end - в конце, а данном случае значит справа;
        => flex-start - то что по умолчанию;
        => center - по центру;
        => space-around - одинаковое пространство слева/справа;
        => space-between - по бокам;
        => space-evenly - между блоками;
    align-items - как равняются элементы
        => flex-end - в конце, а данном случае значит снизу;
        => flex-start - то что по умолчанию/сверху;
        => center - по центру;
    flex-direction: 
        column - в колонку;
        column-reverse
        row - по умолчанию, по горизонтали;
        row-reverse
    */
    /* display: flex;
    justify-content: center;
    align-items: center;
    flex-direction:column; */

    /*Есть второй вариант GRID, но с ним нужно работать, когда 
    есть опыт, т.к. из-за него часто съезжает разметка */
    display: grid;
    /* grid-template-columns: 100px 1500px; /*разнос попиксельно*/
    grid-template-columns: 1fr 2fr; /*1 к 2м*/
}

.my_name{
    color: #cececc;
    text-align: center;
    width: 500px;        /*Ширина и высота элемента*/
    /* height: 500px; */
    
    /* background-color: #bebebe; /*цвет элемента*/
    /* background-image: url('../nature.jpg ');
    /* background-repeat: no-repeat; /*не повторять заполнение картинки*/
    /* background-position: center center; /* горизонт вертикаль - выравннивание нашего блока в этом элементе*/
    /* background-size:100px 100px; /* 100px 100px, 100px auto, auto - авто, cover - покрыть весь блок, contain - чтоб поместилась*/
    /*ИЛИ*/
    background: url(../nature.jpg) center no-repeat #bebebe;

    border: 4px dotted rgb(197, 21, 21); /* 1px - толщина, solid - цельная, dashed - черточками, dotted -точечками,  #000 - цвет,  границв обрамления*/   
    
    /* padding: 30px; /*то что снаружи элемента, отступы*/
    /*ИЛИ*/
    /*padding-top: 30px;
    padding-right: 10px;
    padding-left: 30px;
    padding-bottom: 70px;
    */

    /* margin: 30px; /*то что внутри элемента, отступы*/
    /*ИЛИ*/
    /*margin-top: 30px;
    margin-right: 10px;
    margin-left: 30px;
    margin-bottom: 70px;*/

    /*ИЛИ*/
    /* 1цыфра - везде, 2 (по вертикали и по бокам), 3 (сверху, по бокам, снизу), 4 (по  часовой стрелке - сверху, справа, снизу, слева)*/
    padding:30px 10px 70px 30px;
    margin:30px 10px 70px 30px;


    /* ОТОБРАЖЕНИЕ ДВУХ БЛОКОВ*/
    /*display: inline; в одну линию*/ 
    display: inline-block;
}


.my_first_name{
    color: green;
    font-weight: 700; /*Согласно fonts.google.com - Bold = 700, Regular 400, Medium 500, Light 300, Thin 100  */
}

/* 
.image{
    /* width: 300px;
    /*height: auto;

    /* фиксируем позицию Весёлые_картинки.jpg */
        /* position: fixed; - картинка остается 
        на месте в определенной позиции, 
        страница перемещается */
        /* Для fixed можно задать расположение */
        /* left: 0;
        top: 20px;
        right: auto;
        bottom: unset; */

        /* position: absolute; - картинка закрепляется в определенном месте 
        и перемещается со страницей */
        /* position: absolute;
        left: 20;
        top: 400px;
        right: auto;
        bottom: auto; */

        /* position: static;  */
        /* позиция статична и параметры ниже не влияют */
        /* left: 20;
        top: 400px;
        right: auto;
        bottom: auto; */

        /* position: relative; */
        /*относительно того места, где картинка должна быть,
        и подвинеться на 400рх вниз*/
        /* left: 20;
        top: 400px;
        right: auto;
        bottom: auto; */
/* } */

/*====================================================*/
/* Ситуация, когда появился class="image_block"
и ему задан стиль*/
.image_block{
    position: relative;
}
/* Если у родительского элемента .image_block, 
position: relative; 
то тогда position: absolute; равняется не по всей странице,
а по родительскому элементу */
.image{
    border: 4px dashed;
    width: 300px;
    height: auto;

    position: absolute;
    left: 20px;
    top: 20px;
    right: auto;
    bottom: auto;

    z-index: -1; /*позволяет управлять глубиной перекрытия, 
    -1 выводит текст за картинкой - вперёд*/
}

.my_jobs{
    /*Второй вариант - позволяет управлять глубиной перекрытия, 
    выводит текст за картинкой - вперёд, 
    но нужно чтоб было position: relative;*/
    position: relative;
    z-index: 2;
}